---
title: "Analysing tail behaviour of network generative models"
author: Thomas Boughen
institute: "Maths, Stats and Physics"
format: 
  revealjs:
    theme: simple
editor: source
bibliography: refs.bib
---

```{r, message=FALSE,warning=FALSE, error=FALSE}
library(igraph)
library(ggplot2)
library(ggraph)
library(latex2exp)
```


```{r,warning=FALSE, message=FALSE, error=FALSE}
vidal = read.csv('../degreecounts/maayan-vidal.csv')
names(vidal) = c('degree','count')
yt = read.csv('../degreecounts/com-youtube.csv')
names(yt) = c('degree','count')
dub = read.csv('../degreecounts/infect-dublin.edges', sep=' ')
G = igraph::graph_from_edgelist(as.matrix(dub))
dub = twbfn::deg_count(igraph::degree(G))


pvidal = ggplot(data=vidal, aes(x=degree, y=1-cumsum(count)/sum(count))) + geom_point(colour='darkred')+
  ylab(TeX('$\\bar{F}(k)$'))+ xlab(TeX('Degree ($k$)')) + scale_x_log10() + scale_y_log10()+ theme(aspect.ratio = 1) +ggtitle('Protein-protein Interaction')
pyt = ggplot(data=yt, aes(x=degree, y=1-cumsum(count)/sum(count))) + geom_point(colour='darkred')+
  ylab(TeX('$\\bar{F}(k)$'))+ xlab(TeX('Degree ($k$)')) + scale_x_log10() + scale_y_log10()+ theme(aspect.ratio = 1) + ggtitle('YouTube Friendships')
pdub = ggplot(data=dub, aes(x=degree, y=1-cumsum(count)/sum(count))) + geom_point(colour='darkred')+
  ylab(TeX('$\\bar{F}(k)$'))+ xlab(TeX('Degree ($k$)')) + scale_x_log10() + scale_y_log10()+ theme(aspect.ratio = 1) + ggtitle('Human Contact')

```



## Why study networks?

Networks appear in many fields of research

- Epidemiology (human contact networks)
- Social Networks (YouTube Friendships)
- Biochemistry (protein-protein interactions)

Studying how these networks grow may allow us to

- Predict how the network will change in future
- Understand how the individuals in the network function


## Preferential attachment model

:::{.columns}

::::{.column width='50%'}
```{=html}
<iframe width="780" height="500" src="index.html" scrolling="no" title="Webpage example"></iframe>
```
::::

::::{.column width='50%'}

### Barabási-Albert (BA) Model^[@Barabasi99]
1.  Add a vertex

2.  Connect to $m$ vertices with weights:
  $$
  \pi(u) \propto k_u
  $$

::::
:::

## Degree Distribution

```{r, fig.align='center'}
m = 1
x = m:50
p = (2*m*(m+1)) / (x*(x+1)*(x+2))
P = 1-cumsum(p)

df = data.frame(x=x, p=p, P=P)

P_raw = ggplot(data=df, aes(x=x)) + geom_point(aes(y=P), color='darkred') +
  ylab(TeX('$\\bar{F}(k)$'))+ ylim(0,1)+ xlab(TeX('Degree ($k$)')) + theme(aspect.ratio = 1)

P_log = ggplot(data=df, aes(x=x)) + geom_point(aes(y=P), color='darkred') +
  ylab(TeX('$\\bar{F}(k)$'))+ xlab(TeX('Degree ($k$)')) + scale_x_log10() + scale_y_log10(limits=c(1e-4,1))+ theme(aspect.ratio = 1)

gridExtra::grid.arrange(P_raw, P_log, nrow=1)

```


## Real Data


```{r,warning=FALSE, message=FALSE, error=FALSE, fig.align='center'}
gridExtra::grid.arrange(pvidal, pyt, pdub, nrow=1)
```

- Largest degrees deviate from power law
- These vertices are often the most influential

## A more flexible model 

### Barabási-Albert Model

1.  Add a vertex

2. Connect to $m$ vertices with weight:
  $$
  \pi(u) \propto \color{red}{k_u}
  $$

## A more flexible model 

### General Preferential Attachment 

1.  Add a vertex
2.  Connect to $m$ vertices with weight:
  $$
  \pi(u) \propto \color{red}{b(k_u)}
  $$

Unable to obtain an expression for the degree distribution



## A more flexible model

:::{.columns}

::::{.column width="50%"}

```{=html}
<iframe width="780" height="500" src="gpa.html" scrolling="no" title="Webpage example"></iframe>
```

::::
::::{.column width="50%"} 
### General Preferential Attachment Tree ^[@rudas]

1.  Add a vertex
2.  Connect to <span style="color:red;">one</span> vertex with probability:
  $$
  \pi(u) \propto \color{red}{b(k_u)}
  $$
::::
  
:::


## A basic choice

:::{.columns}

::::{.column width="50%"}
```{=html}
<iframe width="780" height="500" src="aplot_2.gif" scrolling="no" title="Webpage example"></iframe>
```
::::
::::{.column width="50%"}

$$
b(k) = k^\alpha,\qquad \alpha \ge 0
$$


- $\alpha=1$:   BA model
- $\alpha>1$:  winner takes all
- $\alpha<1$: lose power law behaviour
::::
:::

We need something more flexible


## Another Choice


$$
b(k) = \begin{cases}
k^\alpha,&k<T\\
T^\alpha + \beta(k-T),&k\ge T
\end{cases}
$$


```{r, warning=FALSE, message=FALSE, error=FALSE, fig.align='center'}

x = seq(0,50,length.out=100)
y1 = twbfn::ppa_pref(x, 1.5, 1, 25)
y2 = twbfn::ppa_pref(x, 0.5, 0.2, 30)
y3 = twbfn::ppa_pref(x, 1, 0.5, 25)
y4 = twbfn::ppa_pref(x, 1, 2, 25)
y5 = twbfn::ppa_pref(x, 0.5, 0.03, 25)


df = data.frame(x=x, y1,y2,y3,y4,y5)

p1 = ggplot(data=df, aes(x=x)) + geom_line(aes(y=y1), colour='darkred',linewidth=3)+ theme_void() +theme(aspect.ratio = 1) 
p2 = ggplot(data=df, aes(x=x)) + geom_line(aes(y=y2), colour='darkred',linewidth=3)+ theme_void() +theme(aspect.ratio = 1) 
p3 = ggplot(data=df, aes(x=x)) + geom_line(aes(y=y3), colour='darkred',linewidth=3)+ theme_void() +theme(aspect.ratio = 1) 
p4 = ggplot(data=df, aes(x=x)) + geom_line(aes(y=y4), colour='darkred',linewidth=3)+ theme_void() +theme(aspect.ratio = 1) 

p5 = ggplot(data=df, aes(x=x)) + geom_line(aes(y=y5), colour='darkred',linewidth=3)+ theme_void() +theme(aspect.ratio = 1) 
gridExtra::grid.arrange(p1,p2,p3,p4,p5,nrow=1, respect=T)
```

- Can guarantee power law behaviour for large degrees



## Degree Distribution

The model is much more flexible and looks more realistic

:::{.columns}
::::{.column width="33%"}
```{=html}
<iframe width="300" height="300" src="aplot.gif" scrolling="no" title="Webpage example"></iframe>
```
::::
::::{.column width="33%"}
```{=html}
<iframe width="300" height="300" src="bplot.gif" scrolling="no" title="Webpage example"></iframe>
```
::::
::::{.column width="33%"}
```{=html}
<iframe width="300" height="300" src="n0plot.gif" scrolling="no" title="Webpage example"></iframe>
```
::::
:::

- Small degrees resistant to parameter changes 
- This makes it hard to fit to real data
- Most real networks are not trees


## The next steps

:::{.columns}

::::{.column width="50%"}
```{=html}
<iframe width="1250" height="1250" src="mtgpa.html" scrolling="yes" title="Webpage example"></iframe>
```
::::

::::{.column width="50%"}

- Like the BA model, are the results similar for $m>1$?
- How about a random number of edges?
- Other modifications? ^[@rosengren, @deijfen]
  - Multiple types 
  - Vertex death 
  
::::
:::


## Thanks for listening

### References























