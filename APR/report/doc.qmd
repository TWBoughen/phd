---
title: Annual Progress Review
author: 
  - name:  Thomas William Boughen
    affiliations: 
      - name: Newcastle University
        department: School of Mathematics, Statistics and Physics
number-sections: true
number-depth: 1
format: 
  pdf:
    documentclass: scrreprt
    papersize: a4
    fontsize: 10pt
    include-in-header: include-in-header.tex
    template-partials:
      - before-body.tex
    indent: truef
    geometry:
      - inner=2cm
      - outer=2cm
      - top=2cm
      - bottom=2cm
      - headsep=22pt
      - headheight=11pt
      - footskip=33pt
      - ignorehead
      - ignorefoot
      - heightrounded
    output-file: 'doc'
    output-ext: 'pdf'
  html: 
    output-file: 'index'
    page-layout: full
    toc: true
editor: visual
bibliography: references.bib
keep-tex: true
---

```{r, echo=F, warning=F, message=F}
#compile using this line of code in console in same folder as this file
#quarto::quarto_render("doc.qmd", output_format = "all")

#pdftotext APR/report/doc.pdf - | wc -w 
#for word count
library(networkdata)
library(igraph)
source('../scripts/functions.R')
source('../scripts/new_functions.R')
# library(mvtnorm)
#loading data############################

x=degree(atp[[1]],mode='in')
x=x[x>0]
tennis = as.data.frame(table(x))
tennis[,1] = as.numeric(as.character(tennis[,1]))

harvard = read.csv('../data/harvard.txt')
colnames(harvard) = c('x', 'Freq')

data("protein", package='networkdata')
x = degree(protein)
protein.dat = as.data.frame(table(x[x>0]))
protein.dat[,1] = as.numeric(as.character(protein.dat[,1]))/2
colnames(protein.dat) = c('x', 'Freq')


df = load_data('../data/rpkg_20190129.csv')
df0 = df-1
x = df0$depends[df0$depends>0]
depends = as.data.frame(table(x))
depends[,1] = as.numeric(as.character(depends[,1]))
set.seed(123)
G = barabasi.game(3e4)
x = degree(G, mode='in')
x=x[x>0]
sim = as.data.frame(table(x))
sim[,1] = as.numeric(as.character(sim[,1]))

```

```{r, echo=F, warning=F, message=F}
g = function(s,a=1){
  return((s+1)^0.1)
}
f = Vectorize(function(k,lambda,g,a=1){
  if(k==0){
    return(lambda/(lambda+g(k,a)))
  }
  ks = 0:(k-1)
  fracs = 1 - (lambda/(lambda+g(ks,a)))
  return(lambda/(lambda+g(k,a)) * prod(fracs))
}, vectorize.args = 'k')


f_rat = Vectorize(function(k,t,lambda,g,a=1){
  return(log(f(t*k, lambda, g,a))-log(f(k,lambda, g,a)))
}, vectorize.args = 'k')

CDF = Vectorize(function(k,lambda,g,a=1){
  return(sum(f(0:(k-1), lambda, g,a)))
}, vectorize.args='k')
CCDF_rat = Vectorize(function(k,t,lambda, g,a=1){
 return((1-CDF(t*k, lambda, g,a))/(1-CDF(k, lambda, g,a))) 
}, vectorize.args = 'k')


omega = Vectorize(function(k,lambda,g,a=1){
  p1 = log((1-CDF(k+1,lambda,g,a))/(1-CDF(k+2,lambda,g,a)))^-1
  p2 = log((1-CDF(k,lambda,g,a))/(1-CDF(k+1,lambda,g,a)))^-1
  return(p1-p2)
}, vectorize.args = c('k','a'))
omega.vec = function(k,g,a=1){
  lambda = uniroot(cond.b, interval=c(0,30), g=g)$root
  return(omega(k,lambda,g,a))
}


# omega.vec(1:100, g)

cond.b = Vectorize(function(lambda, g){
  vals = 0:1e4
  fracs = g(vals)/(lambda+g(vals))
  out = 0
  for(n in 1:length(vals)){
    eps = prod(fracs[1:n])
    # print(eps)
    out = out + eps
    if(eps<1e-4){
      return(out-1)
    }
  }
  return(out-1)
}, vectorize.args = 'lambda')



```

# Extreme Value Theory

Extreme value theory is a field focused on studying properties at the tail ends of distributions where real world data may be scarce and hard to make inferences from. A lot of the standard theory assumes continuous distributions and that is what will be introduced first before looking at what has been done relating to discrete distributions.

## Standard Theory

One approach for modelling the extreme values is to look at modelling the block maxima of independent and identically distributed random variables $X_1,X_2 \ldots$ that all have a common cumulative distribution function (CDF) $F$. The block maxima $M_n$ being defined as $M_n = \max\{X_1,\ldots,X_n\}$ has its own CDF defined by:

$$
\Pr(M_n\le x) = F_n(x)
$$

$F$ is in the domain of attraction of an extreme value CDF $G$, if and only if the normalised version of $M_n$'s CDF converges to a non degenerate $G$, that is, there exists some sequence of $a_n>0$ and $b_n \in \mathbb R$ such that:

$$
\Pr\left(\frac{M_n-b_n}{a_n}\le x\right) = F^n(a_nx+b_n) \rightarrow G(x),\qquad \text{as }n\rightarrow\infty
$$

If this holds, then $F$ is in the domain of attraction of $G$ which we will write as $F\in\mathcal D(G)$. The extreme value theorem states that is limit CDF $G$ can be catagorised into one of three types:

-   Gumbel: $\Lambda(x) = \exp\{-\exp(-x)\},\quad x\in \mathbb R$

-   Fréchet: $\Phi_a(x) = \exp\{-x^{-\alpha}\},\quad x\ge 0,\alpha>0$

-   Weibull: $\Psi_\alpha(x) = \exp\{-x^{-a}\},\quad x<0,\alpha>0$

::: {#def-gev}
## Generalised Extreme Value Distribution

These three types of distribution can be combined into one single distribution called the Generalised Extreme Value (**GEV**) Distribution which has CDF:

$$
G(x) = \exp\left\{-\left(1+\frac{\xi(x-\mu)}{\sigma}\right)^{-1/\xi}\right\}
$$

denoted $\text{GEV}(\mu, \sigma, \xi)$ for some $\mu\in\mathbb R,\sigma>0, \xi \in \mathbb R$ and has support on $\{x\in \mathbb R:1+\xi(x-\mu)/\sigma > 0\}$ with each of the three types being obtained from changing the values of each of the parameters with $\xi=0$ taken as the limit:

-   Gumbel: $\text{GEV}(\mu, \sigma,0)$

-   Fréchet: $\text{GEV}(1, 1,1/\alpha)$

-   Weibull: $\text{GEV}(-1, -1,-1/\alpha)$

The most important parameter here is $\xi$ which will be referred to as the shape parameter as it controls the tail behaviour of the distribution allowing it to occupy the three domains of attraction.
:::

::: {#def-heavy}
## Heavy Tails

There are a few definitions that can be used to define a distribution that has heavy tails, one that will not be used here is that the tails of the distribution function are heavier than an exponential. Here, a distribution with CDF $F$ will be said to have heavy tails if it is in the Fréchet domain of attraction with tail index $\alpha$, or it is in the Gumbel domain of attraction.
:::

::: {#def-gp}
## Generalised Pareto Distribution

A related distribution called the Generalised Pareto (**GP**) Distribution is also often used to model the probability distribution of threshold excesses, it has the CDF: $$
H(x) = 1-\left(1+\frac{\xi x}{\sigma}\right)^{-1/\xi}
$$ denoted $\text{GP}(\sigma,\xi)$ for some $\sigma>0, \xi\in \mathbb R$ it has support on either $(0,\infty)$ when $\xi \ge 0$ or $(0,-\sigma/\xi)$ when $\xi<0$.
:::

This distribution of often used to model the conditional probability of iid random variables exceeding some cut-off $u$. However, like most of the theory above, it requires iid discrete random variable; in the case of networks and modelling the degrees of their vertices the focus is on discrete data so tools to aid in modelling discrete data are required.

## Discrete Extremes

Since the focus of this report is discrete data, theory on discrete extremes will need to be examined starting with a discrete alternative to the GP distribution.

::: {#def-igp}
## Integrated Generalised Pareto Distribution

Roughly following @Rohrbeck_2018, the integrated generalised pareto (**IGP**) distribution can be defined by considering modelling the random variable $Y = \lceil X\rceil$ for some continuous random variable $X$ with support on the positive real line such that $X|X>u \sim \text{GPD}(\sigma_0+\xi u, \xi)$ for $\xi\in\mathbb R,u\in\mathbb R^+$. The probability mass function (PMF) of the IGP distribution can then be defined as:

For values $y = \lfloor u \rfloor, \lfloor u \rfloor+1, \ldots$ and $\xi \in \mathbb R$ and $u,\sigma_0 \in\mathbb R^+$:

```{=tex}
\begin{align*}
\Pr(Y=y | Y>u) &= \Pr(X<y|X>\lfloor u\rfloor) - \Pr(X<y-1|X>\lfloor u\rfloor) \\
&=\left(1+\frac{\xi(y-1-\lfloor u\rfloor)}{\sigma_0 + \xi \lfloor u \rfloor}\right)_+^{-1/\xi} - \left(1+\frac{\xi(y-\lfloor u\rfloor)}{\sigma_0 + \xi \lfloor u \rfloor}\right)_+^{-1/\xi}
\end{align*}
```
By modelling the ceiling of a continuous random variable, it is also suggested that one could instead model the floor of a continuous random variable instead. Indeed, that is what will be done from here on out. Consider modelling the random variable $Y=\lfloor X\rfloor$, the PMF of the IGP then becomes:

For values $y=\lceil u \rceil,\lceil u \rceil +1,\ldots$ and $\xi \in \mathbb R$ and $u,\sigma_0 \in\mathbb R^+$: par$$
\Pr(Y=y | Y>u) = \left(1+\frac{\xi(y-\lceil u\rceil)}{\sigma_0 + \xi \lceil u \rceil}\right)_+^{-1/\xi} - \left(1+\frac{\xi(y+1-\lceil u\rceil)}{\sigma_0 + \xi \lceil u \rceil}\right)_+^{-1/\xi}
$$
:::

If this is to be used as a discrete alternative to the GP distribution, it needs to be verified that the parameter $\xi$ affects the tail behaviour in the same way. The results from @shimura12 can be used to show that this distribution will indeed belong to the same domain of attraction as the GP distribution for any given value of $\xi$. @shimura12 also introduces an important quantity that will be useful in finding what domain of attraction a discrete distribution belongs to, namely:

$$
\Omega(F,n) = \left(\log\frac{\bar F(n+1)}{\bar F(n+2)}\right)^{-1} -\left(\log\frac{\bar F(n)}{\bar F(n+1)}\right)^{-1}
$$

where $\bar F$ is the survival function of a discrete random variable.

While a lot of distributions may be just be heavy tails, it will be useful to define what is means for a distribution to have super heavy tails. There are several definitions being used but here the one from [SUPER HEAVY ref] will be used.

::: {#def-superheavy}
## Super Heavy Tails
A distribution with $f,F,\bar F$ as its pdf, cdf, and survival respectively is said to have super heavy tails if the survival function $\bar F$ is slowly varying. That is:
$$
\lim_{x\rightarrow\infty}\frac{\bar F(cx)}{\bar F(x)} = 1, \qquad\forall c \in \mathbb{R^+} 
$$
It should be noted that this condition is sufficient but not necessary and does not capture all distributions with super heavy tails.
:::
# Networks
In the previous section an overview of extreme value theory was given, in this section context will be given as to what distributions are in the scope of this research and what they arise from.

## Mathematical Definition
The networks being analysed will be treated as mathematical graphs that consist of two kinds of objects, vertices that usually represent the individual components in a complex system, and edges that represent the relationships between these components. The focus, for now, will be on undirected networks and therefore undirected graphs.

::: {#def-graph}
## Undirected Graph
An undirected graph $G$ consists of a set of vertices $V$ and a set of edges between these vertices say $E$, this will be denoted as $G = (V,E)$ where $V$ is usually a subset of $\mathbb N$ and $E$ is a subset of the set of unordered pairs of $V$.
:::

:::{#def-deg}
## Degree
A vertex $i$ has degree $k_i$, where $k_i$ is the number of appearances of $i$ in the set $E$. That is, the degree of a vertx is the number of edges that connect to it.
:::

## Analysis of Real World Networks
Before looking at what has and could be used to model the growth of real networks, it will be useful to analyse some examples. The property of focus here will be the degree distribution of real world networks, more specifically the tail behaviour. @fig-survs shows the survival function of the degree distribution (on a log-log plot) for four examples of real world networks that represent: game results between top tennis players, facebook friends of Harvard students and alumni, interactions between proteins in cells, and the dependencies of R packages.

```{r, echo=F, warning=F, message=F, fig.hold=T, fig.asp=0.2, fig.width=50, out.width="90%"}
#| label: fig-survs
#| fig.cap: Survival function of the degrees.
tennis.surv= plot.surv(tennis) +ggtitle('Tennis')+theme(text = element_text(size=35))+theme(plot.title = element_text(hjust = 0.5))
harvard.surv = plot.surv(harvard) + ggtitle('Harvard')+theme(text = element_text(size=35))+theme(plot.title = element_text(hjust = 0.5))
protein.surv = plot.surv(protein.dat) + ggtitle('Protein')+theme(text = element_text(size=35))+theme(plot.title = element_text(hjust = 0.5))
depends.surv = plot.surv(depends)+ggtitle('CRAN')+theme(text = element_text(size=35))+theme(plot.title = element_text(hjust = 0.5))

plot.list = list(tennis.surv,
harvard.surv,
protein.surv,
depends.surv)

marrangeGrob(plot.list, nrow=1, ncol=4, top='')
```
The shapes of the curves in @fig-survs are all fairly different but, they all seem to start with what looks like one power law and then begins to deviate after a certain point indicating the while the bulk of the data follows the one power law the right tail does not necessarily exhibit the same behaviour. Seeing this and with the aim of investigating the tail-heaviness of networks degree distributions, fitting a model that uses a power law for the bulk of the data and the IGP distribution (@def-igp) for the right tail above a certain threshold should allow for estimation of the tail-index.

### Power Law IGP Mixture Model (PL-IGP)

A traditional way of modelling continuous extreme values often involves using the GP distribution (@def-gp) to model the conditional distribution of the largest values however here the data is discrete and so instead the IGP will be used as an alternative. For the bulk of the data a truncated power law distribution will be used which is defined in @def-tpl below, and for the right tail the IGP will be used.

:::{#def-tpl}

## Truncated Power Law
The truncated power law distribution has two parameters $\alpha \in \mathbb R$,$v \in \mathbb Z^+$ and has support of $(1,v)$. The pdf of this distribution is:
$$
f(x) = \begin{cases}
\frac{x^{-(\alpha+1)}}{\sum_{i=1}^v i^{-(\alpha+1)}}&,x=1,2,\ldots,v\\
0&,\text{otherwise}
\end{cases}
$$
:::



## Network Generative Models

The way in which vertices and edges are added and removed from networks over time is of great interest as it can lead to inferences about the underlying mechanics of a complex system and allow for theorising what may happen to the network in the future. To that end, finding a model that is both simple enough and leads to properties that match real world networks is of utmost importance. Next, the degree distribution of various network models are analysed starting fairly simple and gradualling getting more complex.

:::{#def-uniform}

## Uniform attachment model
Consider an initial graph $G_0$ with vertex set $V_0=\{1,2,\ldots,m_0\}$ and edge set $E_0=\emptyset$. Starting at $t=1$ repeat the steps below:

1. Add a vertex to the network, $V_t=V_{t-1}\cup\{m_0+t\}$
2. Add $m\le m_0$ edges to the network connecting the new vertex to those in already in the network. With the existing vertices to be chosen uniformly at random from $V_{t-1}$ with replacement.
:::

{{< pagebreak >}}
# References {.unnumbered}
